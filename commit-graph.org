* Links
*** https://devblogs.microsoft.com/devops/supercharging-the-git-commit-graph/
*** https://devblogs.microsoft.com/devops/supercharging-the-git-commit-graph-ii-file-format/
***** Performance gains:
****** parsing the commit-graph file INSTEAD of raw commits
******* D: parsing this tabular data faster than unzipping and parsing the plain-text commit information
******* A: only need to do the binary search once for each of the starting positions of our walk (if commit exists in cg file , it's parents must be too)
****** from avoiding object database lookups
****** walking N commits went from O(N log N) as packfile  to O(N) as commit-graph
****** 5-10x speedup for certain Git commands.

*** https://devblogs.microsoft.com/devops/supercharging-the-git-commit-graph-iii-generations/

***** Change of the structure to cg file
******  Commit Data:
******* Commit Date 8 bytes:  split up to
******** commit date
******** generation number
***** Why not just use commit date
****** imsynchronized clock
***** Design of generation number
****** gen(Root) = 1
****** If gen(A) < gen(B) then A cannot reach B.
****** use generation to walk in order of descending instead of commit date

***** Performance gains:
****** force-push:  核心思想 解决"Can X Reach Y ?"的性能问题
#+begin_src text
          典型的 X是否可以reach Y的场景，注意 reach的概念指的是沿着DAG的边(edge)的方向(generation->root)是否可达, 如果可达，我们叫做"X can reach Y" 或者 "Y is reachable by X".  回到push， server branch的版本为Y， 本地版本为X,  如果walk时找到Y并且距离X较近，那么性能是可以接受的， 但是如果Y在本地并不存在， 那么X开始将walk整个提交历史尝试寻找Y， so这里主要可以提升本地walk性能的提升？ 如何做呢？思想就是前面提到的：不要访问generations number 低于 Y的这些提交
#+end_src

****** find merge-base: git merge 以及 git status等场景下， 用generation number替代原有的commit date解决时钟不一致带来的性能问题

#+begin_src text
  合并等场景， 例如A和B之间可能有多个merge bases，这时候寻找merge bases遵循两点：
  ,* 某个merge-base必须是 A和B都可达的提交；
  ,* 某个merge-base对某个commit不可达， 但是A和B都可达这个commit；

  Git是如何做的呢？
        1. walk A 和 B 提交，顺序为“提交时间”倒序，标记沿途A和B可达或同时可达的提交
        2.当找到边界提交(boundry commits)时停止, 即，当找到某个commit为A和B同时可达时，  比较该commit的parent为“uninteresting”, 这个不再感兴趣的提交就是边界提交。
        3. 下一步，我们再次对A和B进行walk， 来找到第一个A和B都标记为“interesting”的commit， 如果找到了， 这就是我们的merge base。

#+end_src

******  topo order sort: git log --graph (命令行性能和Azure展示graph的数据展示和过滤页面的性能优化)

#+begin_src text
          什么是topological sorting? 就是让所有的边都朝下指向， 更通俗的讲， 普通commit必须在它parent之前出现（https://en.wikipedia.org/wiki/Topological_sorting）， 让你执行 `git log --graph`的时候，实际上git就会帮你完成topological sort。
#+end_src

*** https://devblogs.microsoft.com/devops/super-charging-the-git-commit-graph-iv-bloom-filters/
***** Why? -apply a filter to our results
***** Scenes:  `git log master -- The/Path/To/My/File.txt`
******  If the path is not modified very often...
****** In the example above, we need to walk five trees: the root tree and four nested trees for the directories above “File.txt”.
***** How to show the specific path's commits (log)
******   [key problem] determine if a path is different between a commit and a parent is very expensive, especially as the number of subfolders increases (compare trees)
***** 一种方式是在提交时， 用数据库记录"commit"<->"modified paths"的关联关系, 但是这会占用大量的空间（60 GB just for the Linux kernel repository）
***** 另一种希望的方式是， 希望数据库可以保存两个结果：
****** 1. 给定commit和其first-parent， 某一个path是否没有更新
****** 2. 这个path在这个提交和它的第一个父节点之间“可能”是不同的。
******  上面第2点提到的"可能"就是我们使用bloom-filters的原因。如果我们明确commit和first-parent“可能不一样”，我们就可以进一步来确认这个答案。
***** About bloom filter
****** 基本思想：
******* 1. 通过Hash函数将一个元素映射成一个位阵列（Bit Array）中的一个点。
******* 2. 这样一来，我们只要看看这个点是不是 1 就知道可以集合中有没有它了，如果一个点不匹配，那么一定没有； 相反如果所有的点都有，那么在集合中可能存在（因为hash冲突的原因， 存在误识别率）。
******* 3. 如果这就是布隆过滤器的基本思想。
****** 优势：空间效率和查询时间
******* 没有识别错误的情况，即假反例（False negatives），如果某个元素确实没有在该集合中，那么Bloom Filter 是不会报告该元素存在于集合中的，所以不会漏报
******* 查询查询时间复杂度：O(1)
******* Hash函数互相之间没有关系， 方便由硬件并行实现
******* bloom filter不需要存储元素本身，某些对安全要求严格的场合有优势
******* k (hash函数个数)和 m (数组大小) 相同，使用同一组 Hash 函数的两个布隆过滤器的交并差运算可以使用位操作进行
****** 劣势：
******* 存在一定误识别率（false-positive）,即Bloom Filter报告某一元素存在于某集合中，但是实际上该元素并不在集合中, 其根源在于在相同的bit位被多个不同的element置1; 
******* 随着存入的元素数量增加，误算率随之增加；
******* 删除困难； 一般情况下不能从布隆过滤器中删除元素， 因为bit位并不是由某一个特定element独占的. 我们很容易想到把位列阵变成整数数组，每插入一个元素相应的计数器加1, 这样删除元素时将计数器减掉就可以了。然而要保证安全的删除元素并非如此简单。首先我们必须保证删除的元素的确在布隆过滤器里面. 这一点单凭这个过滤器是无法保证的。另外计数器回绕也会造成问题。
****** Hash Collision:
******* 前提： Hash 函数是良好的
******* 冲突概率计算： 如果我们的位阵列长度为 m 个点，那么如果我们想将冲突率降低到例如 1%, 这个散列表就只能容纳 m/100 个元素，显然这就不叫空间有效了 (Space-efficient).
******* 解决方法也简单，就是使用多个Hash, so， 如果它们有一个说元素不在集合中，那肯定就不在。如果它们都说在，虽然存在它们在说谎的可能，但是直觉判断这🀄️事情的概率比较低。
****** 参数选择：
******* 1, when n/m = 10 （the number of bits per set element) and k = 7 (hash functions) the false positive probabilityis just over 0.008. （http://theory.stanford.edu/~rinap/papers/esa2006b.pdf）
******* 2,  So, if we expect the Bloom filter to contain N elements, reserve at least 10N bits. These bits all start in the “off” position.
****** 技术对比：
******* hashtable： hash表是常用的选型， 但是缺点是会暂用大量的存储空间（比如说，一个象 Yahoo,Hotmail 和 Gmai 那样的公众电子邮件（email）提供商，总是需要过滤来自发送垃圾邮件的人（spamer）的垃圾邮件。一个办法就是记录下那些发垃圾邮件的 email 地址。由于那些发送者不停地在注册新的地址，全世界少说也有几十亿个发垃圾邮件的地址，将他们都存起来则需要大量的网络服务器。如果用哈希表，每存储一亿 个 email 地址， 就需要 1.6GB 的内存（用哈希表实现的具体办法是将每一个 email 地址对应成一个八字节的信息指纹（详见：googlechinablog.com/2006/08/blog-post.html）， 然后将这些信息指纹存入哈希表，由于哈希表的存储效率一般只有 50%，因此一个 email 地址需要占用十六个字节。一亿个地址大约要 1.6GB， 即十六亿字节的内存）。因此存贮几十亿个邮件地址可能需要上百 GB 的内存。除非是超级计算机，一般服务器是无法存储的）
****** 用例场景：
******* Google 著名的分布式数据库 Bigtable 使用了布隆过滤器来查找不存在的行或列，以减少磁盘查找的IO次数［3］。
******* Squid 网页代理缓存服务器在 cache digests 中使用了也布隆过滤器［4］。
******* Venti 文档存储系统也采用布隆过滤器来检测先前存储的数据［5］。
******* SPIN 模型检测器也使用布隆过滤器在大规模验证问题时跟踪可达状态空间［6］。
******* Google Chrome浏览器使用了布隆过滤器加速安全浏览服务［7］。
******* 业务场景中判断用户是否阅读多某视频或者文章，比如抖音或者头条，当然会导致一定的误判， 但不会让用户看到重复的内容。 
******* 在很多Key-Value系统中也使用了布隆过滤器来加快查询过程，如 Hbase，Accumulo，Leveldb，一般而言，Value 保存在磁盘中，访问磁盘需要花费大量时间，然而使用布隆过滤器可以快速判断某个Key对应的Value是否存在，因此可以避免很多不必要的磁盘IO操作，只是引入布隆过滤器会带来一定的内存消耗，下图是在Key-Value系统中布隆过滤器的典型使用


#+begin_src c
       Do you have 'key1' ? -----------> Filter : NO
                    "Do not have" <-----------

       Do you have 'key2' ? -----------> Filter : YES    -----------> Storage : YES
                    "Do have"     <---------------------------------       Yes exists    <-----------
      
        Do you have 'key3' ? -----------> Filter : YES    -----------> Storage : No
                  "Do not have"     <----------------------------------  non-exists    <-----------      
#+end_src


***** bloom filter如何解决这个问题
******* If the number of changed paths is not too large (we use 512 as a limit in VSTS) then create a Bloom filter and seed it with the values for those paths
******* If there are more than 512 changes, then we mark the commit as “Bloom filter too large” and check every path
******* one commit one bloom filter , “changed paths on each commit” as elements
***** Benifts
******* 100x by avoiding 99% of the computation theoretically.
******* In reality this is closer to a 6x speedup for a random sample of paths.
******* observed speedups as high as 20x for rarely-changed paths.
******* less than 100MB of extra storage for a repository the size of the Linux kernel.

*** https://git-scm.com/docs/git-commit-graph
**** write:
*** https://devblogs.microsoft.com/devops/updates-to-the-git-commit-graph-feature/
***** rewriting the entire file is slow sometimes, so it also support multi-commit-graph
***** we can use `--split` to ceate a incremental commit-graph file
#+begin_src shell
  git commit-graph write --reachable
  git commit --allow-empty -m "empty"
  git commit-graph write --reachable --split

The

‐‐split option enables creating a chain of commit-graph files. If you ever run the command without the ‐‐split option, then the chain will merge into a single file.
#+end_src
***** we can use `--size-multiple=<X>` and `--max-commits=<M>` to merge commit-graph files
*** https://github.blog/2020-07-27-highlights-from-git-2-28/#changed-path-bloom-filters
*** [RFC] https://public-inbox.org/git/fca023a3-f849-4be8-db42-7027bfe7b0dc@gmail.com/

* Statistics

** Git Repository:

master: b50d82b00a8fc9d24e41ae7dc30185555f8fb0a0
topic:  e144d126d74f5d2702870ca9423743102eec6fcd

#+begin_src shell
  Command	Before	After	Change
  git merge-base master topic	0.10	0.04	-60%
  git branch --contains	0.76	0.03	-96%
  git tag --contains	0.70	0.03	-96%
  git tag --merged	0.74	0.12	-84%
  git log --graph -10	0.44	0.05	-89%
#+end_src

** Linux Repository:

master: 032b4cc8ff84490c4bc7c4ef8c91e6d83a637538
topic:  62d18ecfa64137349fac9c5817784fbd48b54f48

#+begin_src shell
  Command	Before	After	Change
  git merge-base master topic	0.52	0.06	-88%
  git branch --contains	76.20	0.04	-99%
  git tag --contains	5.30	0.03	-99%
  git tag --merged	6.30	1.50	-76%
  git log --graph -10	5.90	0.74	-87%
#+end_src

** Windows Repository (GVFS):

#+begin_src shell
  Command	Before	After	Change
  git status --ahead-behind	14.30	4.70	-67%
  git merge-base A B	11.40	1.80	-84%
  git branch --contains	9.40	1.60	-83%
  git log --graph -10	24.30	5.30	-78%
  #+end_src

* tests

** Linux

*** write commit-graph(不加--changed-path为32s, 加上193s )
#+begin_src shell
LANG=en_GB /usr/local/bin/git commit-graph write --reachable  18.07s user 2.05s system 61% cpu 32.757 total
#+end_src


➜  info git:(master) ✗ time git commit-graph write --reachable --changed-paths
Expanding reachable commits in commit graph: 1059090, done.
Computing commit changed paths Bloom filters: 100% (1059090/1059090), done.
Writing out commit graph in 6 passes: 100% (6354540/6354540), done.
LANG=en_GB /usr/local/bin/git commit-graph write --reachable --changed-paths  171.21s user 4.99s system 90% cpu 3:13.98 total


*** 三年前修改的文件 执行 git log (提升30%)

#+begin_src shell
    ➜  pack git:(master) ✗ time git log  8ab7745879037 -- scripts/gdb/Makefile > /dev/null
    LANG=en_GB /usr/local/bin/git log 8ab7745879037 -- scripts/gdb/Makefile >   1.28s user 0.29s system 99% cpu 1.583 total

    ➜  pack git:(master) ✗ time git log  8ab7745879037 -- scripts/gdb/Makefile > /dev/null
  LANG=en_GB /usr/local/bin/git log 8ab7745879037 -- scripts/gdb/Makefile >   0.83s user 0.26s system 99% cpu 1.097 total

➜  info git:(master) ✗ hyperfine "git log  8ab7745879037 -- scripts/gdb/Makefile > /dev/null"
Benchmark 1: git log  8ab7745879037 -- scripts/gdb/Makefile > /dev/null
  Time (mean ± σ):     224.5 ms ±   8.0 ms    [User: 179.3 ms, System: 40.6 ms]
  Range (min … max):   207.1 ms … 234.9 ms    14 runs
#+end_src

*** 拓扑排序 (提升200倍)

#+begin_src shell
  ➜  pack git:(master) ✗ time  git log --graph -10 > /dev/null
  LANG=en_GB /usr/local/bin/git log --graph -10 > /dev/null  10.38s user 0.77s system 99% cpu 11.224 total
➜  pack git:(master) ✗ time  git log --graph -10 > /dev/null
LANG=en_GB /usr/local/bin/git log --graph -10 > /dev/null  0.00s user 0.05s system 94% cpu 0.061 total
#+end_src

*** merge base : rev-list 245407个提交差异, 提升3-4倍;   13137个提交，提升5-6倍

#+begin_src shell
  ➜  pack git:(master) ✗ hyperfine "git rev-list v5.0...v5.16-rc1 > /dev/null"
  Benchmark 1: git rev-list v5.0...v5.16-rc1 > /dev/null
    Time (mean ± σ):      3.782 s ±  0.029 s    [User: 3.331 s, System: 0.443 s]
    Range (min … max):    3.747 s …  3.840 s    10 runs

  ➜  pack git:(master) ✗ hyperfine "git rev-list v5.0...v5.16-rc1 > /dev/null"
Benchmark 1: git rev-list v5.0...v5.16-rc1 > /dev/null
  Time (mean ± σ):     880.8 ms ±  18.6 ms    [User: 627.9 ms, System: 246.7 ms]
  Range (min … max):   836.9 ms … 903.7 ms    10 runs

        ➜  pack git:(master) ✗ hyperfine "git rev-list v5.15...v5.16-rc1 > /dev/null"
      Benchmark 1: git rev-list v5.15...v5.16-rc1 > /dev/null
        Time (mean ± σ):      1.736 s ±  0.014 s    [User: 1.583 s, System: 0.147 s]
        Range (min … max):    1.722 s …  1.763 s    10 runs

        ➜  pack git:(master) ✗ hyperfine "git rev-list v5.15...v5.16-rc1 > /dev/null"

        Benchmark 1: git rev-list v5.15...v5.16-rc1 > /dev/null
          Time (mean ± σ):     289.8 ms ±   5.6 ms    [User: 238.5 ms, System: 48.3 ms]
          Range (min … max):   275.5 ms … 297.5 ms    10 runs


#+end_src

* Command Usage
** write
**** default：  based on the commits found in packfiles 注意松散的文件是取不到的， 所以如果要定时更新该文件需要
**** --reachable ：  by walking commits starting at all refs
**** --changed-paths： 记录commit和first-commit之间修改的paths信息， *应该开启*
**** --max-new-filters=<n>： 如果` --changed-paths`开启了，  则<n>为bloom filters的最大数量， 如果<n>=-1则无限制。推荐使用`—split=replace`.
**** --split[=<strategy>]: write the commit-graph as a chain of multiple commit-graph files stored in <dir>/info/commit-graphs.Commit-graph layers are merged based on the strategy and other splitting options. The new commits not already in the commit-graph are added in a new "tip" file. This file is merged with the existing file if the following merge conditions are met:
***** --split=no-merge : 从来不合并
***** --split=replace： 覆盖现有的chain， 重新生成一个
***** --split：取决于下面的选项
****** --size-multiple=<X> ： default is 2.  M : previous tip file commits number; N: new tip file commits number. if X * N > M, 合并两个文件为1个文件
****** --max-commits=<M>： if new tip file commits nr > M , 合并两个文件为一个文件
****** --expire-time=<datetime>： default: `datetime`.After writing the split commit-graph, delete all unused commit-graph whose modified times are older than datetime.
** verify

* Scences
*** git status (need to compute merge bases on server)
*** git log --graph (reports in topological order, algorithm walks every reachable commit before displaying a single commit to the user. Like Azure support a graph view of commits topotical ordered, filters like author/date_interval )
*** git log master -- The/Path/To/My/File.txt (on the repo main page)
* File format
*** HEADER
**** 4-byte signature:  The signature is: {'C', 'G', 'P', 'H'}
**** 1-byte version number:  the only valid version is 1.
**** 1-byte Hash Version: 1 => SHA-1, 2 => SHA-256
**** 1-byte number (C) of "chunks"
**** 1-byte number (B) of base commit-graphs. We infer the length (H*B) of the Base Graphs chunk from this value.
*** CHUNK LOOKUP
**** (C + 1) * 12 bytes listing the table of contents for the chunks:
#+begin_src text
          First 4 bytes describe the chunk id. Value 0 is a terminating label.
          Other 8 bytes provide the byte-offset in current file for chunk to
          start. (Chunks are ordered contiguously in the file, so you can infer
          the length using the next chunk position if necessary.) Each chunk
          ID appears at most once.
#+end_src

*** CHUNK DATA
**** 256 * 4 bytes: OID Fanout (ID: {'O', 'I', 'D', 'F'})
**** N * H bytes: OID Lookup (ID: {'O', 'I', 'D', 'L'}) .The OIDs for all commits in the graph, sorted in ascending order.
**** N * (H + 16) bytes): Commit Data (ID: {'C', 'D', 'A', 'T' })
***** The first H bytes are for the OID of the root tree.
***** The next 8 bytes are for the positions of the first two parents of the ith commit. Stores value 0x70000000 if no parent in that position. If there are more than two parents, the second value has its most-significant bit on and the other bits store an array position into the Extra Edge List chunk.
***** The next 8 bytes store the topological level (generation number v1)  of the commit and the commit time in seconds since EPOCH. The generation number uses the higher 30 bits of the first 4 bytes, while the commit time uses the 32 bits of the second 4 bytes, along with the lowest 2 bits of the lowest byte, storing the 33rd and 34th bit of the commit time.
***** TODO https://git-scm.com/docs/commit-graph-format
  
**** Commit IDs: sorted and can be indexed as "Graph Position"
****** Fanout: 256 entries, The fanout value F[i] stores the number of commits whose first byte (or first two hex digits) of their ID is at most i. Thus, F[0xff] stores the total number of commits. This allows us to seed the initial values of the binary search into the commit IDs.
****** Commit Data:
******* Root Tree ID
******* Commit Date
******* "Graph Positions" of 2 parents as integers (not commit id, avoiding perform a binary search again)
****** Octopus Edges:
******* Second parent value of Commit Data : a position to octopus edges list to store the parents ( null-termination trick to let the list of parents be arbitrarily large)



* What I Learn?

***** 《the commit which has 66 parents in Linux Kernel》: https://www.destroyallsoftware.com/blog/2017/the-biggest-and-weirdest-commits-in-linux-kernel-git-history
***** https://github.com/Microsoft/perfview the performance analysis tool mentioned in article by stolee
***** https://en.wikipedia.org/wiki/Depth-first_search DFS argorithem
***** how git find merge bases between A and B:  (https://devblogs.microsoft.com/devops/supercharging-the-git-commit-graph-iii-generations/#using-generation-number-in-merge-base-questions)
******  1. First walk: find boundary commits that both A and B are reachable then stop ( mark parents of boundaries as "uninteresting to specify the range of the second walk")
****** 2. Second walk: from A and B, to find the first interesting commit that is reachable from both.
****** 3. 由于时钟偏差可以提供不正确的提交顺序，我们可能需要遍历两次提交:一次是分发“从A可达”标记，第二次是分发“从B可达”标记。
***** 《git log history simplification》 https://docs.microsoft.com/en-us/azure/devops/repos/git/git-log-history-simplification?view=azure-devops&viewFallbackFrom=vsts
*****  《bloom filter》
****** https://en.wikipedia.org/wiki/Bloom_filter
****** https://www.cnblogs.com/liyulong1982/p/6013002.html

* Test


 #+begin_src shell
grpcurl -plaintext -protoset satellite.protoset  -d '{"repository": {"gl_repository_id": 551613,"relative_path": "dyrone/dyrone/dyrone.git","storage_name": "default"}}'  localhost:58081 "satellite.RepositoryService/WriteCommitGraph"
 #+end_src


** codeup production test

*** git repository

**** page: https://codeup.aliyun.com/5f3e418e6207a1a8b17f9257/git_source/tree/master/contrib
**** APi:
***** Tree first time (root dir) : https://codeup.aliyun.com/api/v4/projects/1680320/repository/tree?_input_charset=utf-8&type=FLATTEN&path=&ref_name=refs/heads/master

    412 ms ~794
***** Tree second time (sub dir):

    417~563
    
***** Last commit

    259~426
***** batch

    640~750

*** hyperfine:

**** 根提交
#+begin_src shell
$hyperfine --warmup=10 "/opt/git/master/bin/git log --max-count=1 --pretty=format:'%H% %s %B %an %ae %aI %cn %ce %cI %P' -z --"
Benchmark 1: /opt/git/master/bin/git log --max-count=1 --pretty=format:'%H% %s %B %an %ae %aI %cn %ce %cI %P' -z --
  Time (mean ± σ):       1.1 ms ±   0.1 ms    [User: 0.5 ms, System: 0.8 ms]
  Range (min … max):     1.0 ms …   1.6 ms    1580 runs

#+end_src

**** contrib目录, 修改时间： 2021.12.21

#+begin_src shell
$hyperfine --warmup=10 "/opt/git/master/bin/git log --max-count=1 --pretty=format:'%H% %s %B %an %ae %aI %cn %ce %cI %P' -z -- contrib"
Benchmark 1: /opt/git/master/bin/git log --max-count=1 --pretty=format:'%H% %s %B %an %ae %aI %cn %ce %cI %P' -z -- contrib
  Time (mean ± σ):       2.0 ms ±   0.1 ms    [User: 1.1 ms, System: 0.9 ms]
  Range (min … max):     1.8 ms …   2.6 ms    997 runs
#+end_src

**** contrib/contacts目录， 2017年07月28日

#+begin_src shell
$hyperfine --warmup=10 "/opt/git/master/bin/git log --max-count=1 --pretty=format:'%H% %s %B %an %ae %aI %cn %ce %cI %P' -z -- contrib/contacts"
Benchmark 1: /opt/git/master/bin/git log --max-count=1 --pretty=format:'%H% %s %B %an %ae %aI %cn %ce %cI %P' -z -- contrib/contacts
  Time (mean ± σ):     173.8 ms ±   3.8 ms    [User: 151.6 ms, System: 22.1 ms]
  Range (min … max):   168.6 ms … 178.9 ms    16 runs
#+end_src

#+begin_src shell
$hyperfine --warmup=10 "/opt/git/master/bin/git log --max-count=1 --pretty=format:'%H% %s %B %an %ae %aI %cn %ce %cI %P' -z -- contrib/contacts"
Benchmark 1: /opt/git/master/bin/git log --max-count=1 --pretty=format:'%H% %s %B %an %ae %aI %cn %ce %cI %P' -z -- contrib/contacts
  Time (mean ± σ):      15.0 ms ±   0.8 ms    [User: 10.9 ms, System: 4.1 ms]
  Range (min … max):    13.8 ms …  18.2 ms    196 runs
#+end_src

#+begin_src shell
$time git log --max-count=1 --pretty=format:'%H% %s %B %an %ae %aI %cn %ce %cI %P' -z -- contrib/contacts
..
real    0m0.185s
user    0m0.145s
sys     0m0.041s
#+end_src

#+begin_src shell
$time git log --max-count=1 --pretty=format:'%H% %s %B %an %ae %aI %cn %ce %cI %P' -z -- contrib/contacts
09ac6737887e26dd2b1f078946400c012955f081git-contacts: also recognise "Reported-by:" git-contacts: also recognise "Reported-by:"

It's nice to cc someone that reported a bug, in order to let them
know that a fix is being considered, and possibly even get their
help in reviewing/testing the patch.

Signed-off-by: Eric Blake <eblake@redhat.com>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
 Eric Blake eblake@redhat.com 2017-07-21T09:15:30-05:00 Junio C Hamano gitster@pobox.com 2017-07-27T09:42:55-07:00 5800c63717ae35286a1441f14ffff753e01f7e2b

real    0m0.025s
user    0m0.019s
sys     0m0.007s
#+end_src

**** contrib/git-shell-commands目录, 修改时间： 2010.7.28

#+begin_src shell
$hyperfine --warmup=10 "/opt/git/master/bin/git log --max-count=1 --pretty=format:'%H% %s %B %an %ae %aI %cn %ce %cI %P' -z -- contrib/git-shell-commands"
Benchmark 1: /opt/git/master/bin/git log --max-count=1 --pretty=format:'%H% %s %B %an %ae %aI %cn %ce %cI %P' -z -- contrib/git-shell-commands
  Time (mean ± σ):     383.7 ms ±   6.1 ms    [User: 338.8 ms, System: 44.8 ms]
  Range (min … max):   378.3 ms … 393.1 ms    10 runs
#+end_src 

#+begin_src shell
$hyperfine --warmup=10 "/opt/git/master/bin/git log --max-count=1 --pretty=format:'%H% %s %B %an %ae %aI %cn %ce %cI %P' -z -- contrib/git-shell-commands"
Benchmark 1: /opt/git/master/bin/git log --max-count=1 --pretty=format:'%H% %s %B %an %ae %aI %cn %ce %cI %P' -z -- contrib/git-shell-commands
  Time (mean ± σ):      19.3 ms ±   1.1 ms    [User: 15.4 ms, System: 3.9 ms]
  Range (min … max):    18.0 ms …  23.1 ms    157 runs
#+end_src


#+begin_src shell
$time git log --max-count=1 --pretty=format:'%H% %s %B %an %ae %aI %cn %ce %cI %P' -z -- contrib/git-shell-commands
..
real    0m0.407s
user    0m0.328s
sys     0m0.080s
#+end_src

#+begin_src shell
$time git log --max-count=1 --pretty=format:'%H% %s %B %an %ae %aI %cn %ce %cI %P' -z -- contrib/git-shell-commands
54baefda8c0bbee461a4cd68dca970d92fddced0Add sample commands for git-shell Add sample commands for git-shell

Provide a 'list' command to view available bare repositories ending in
.git and a 'help command to display usage.  Also add documentation in
a README

Signed-off-by: Greg Brockman <gdb@mit.edu>
Signed-off-by: Junio C Hamano <gitster@pobox.com>
 Greg Brockman gdb@MIT.EDU 2010-07-28T00:43:04-07:00 Junio C Hamano gitster@pobox.com 2010-08-12T15:16:31-07:00 e69164ddb9d6092a94915bb984749d48f598cea8

real    0m0.029s
user    0m0.020s
sys     0m0.009s
#+end_src


*** page

**** batch 获取 目录最近提交接口
   Waiting (TTFB)  1.19s

   Waiting (TTFB)  630ms

   200 * 4= 800ms

   tree (contrib目录): 370ms
   tree (根目录)： 380ms



   perf: TTFB 22-26ms
   
