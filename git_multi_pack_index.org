* Git multiple pack index

* Backgrounds:[RFC] https://lore.kernel.org/git/20180107181459.222909-1-dstolee@microsoft.com/

** Performances gap in incremental numbers of packs
#+begin_src shell
  I created three copies of the Linux repo with 1, 24, and 127 packfiles
  each using 'git repack -adfF --max-pack-size=[64m|16m]'. These copies
  gave significant performance improvements on the following comand:

      git log --oneline --raw --parents

  Num Packs | Before MIDX | After MIDX |  Rel % | 1 pack %
  ----------+-------------+------------+--------+----------
          1 |     35.64 s |    35.28 s |  -1.0% |   -1.0%
         24 |     90.81 s |    40.06 s | -55.9% |  +12.4%
        127 |    257.97 s |    42.25 s | -83.6% |  +18.6%

The last column is the relative difference between the MIDX-enabled repo
and the single-pack repo. The goal of the MIDX feature is to present the
ODB as if it was fully repacked, so there is still room for improvement.
#+end_src

** “如果让ODB均以pack形式存储的话，存在一定的提升空间”

#+begin_src shell

   "The goal of the MIDX feature is to present the ODB as if it was fully repacked, so there is still room for improvement."

  这是很重要的一句话，让ODB均以打包的形式进行存储，如果是这样的话， 仍存在提升空间。 SO why? 这是因为 github 禁用了unpackLimit，这样推送的数据均以pack的方式存储，对于大型的仓库特别是协作频繁（大型团队或大型开源项目），导致重复的或者非重复的对象存在多个不同的pack中。
#+end_src

** 为什么会希望ODB以pack形式进行存储（Microsoft:GVFS & Github: 解压将带来内存开销） 

#+begin_src shell
    "We are using a version of this patch with an upcoming release of GVFS.This feature is particularly important in that space since GVFS performs a "prefetch" step that downloads a pack of commits and trees on a daily basis. These packfiles are placed in an alternate that is shared by all enlistments. Some users have 150+ packfiles and the MRU misses and abbreviation computations are significant. Now, GVFS manages the MIDX file after adding new prefetch packfiles using the following command: 
        git midx --write --update-head --delete-expired --pack-dir=<alt>
  As that release deploy we will gather more specific numbers on the performance improvements and report them in this thread."

  GVFS中首先使用了midx来提升多包的性能问题， GVFS中又一个预下载的步骤， 用来下载commits和trees， 这些packfiles存放在一个alternate， 从而可以让所有人共享。 有些用户会同时在仓库中存在150个pack，MRU缓存无法命中， 并且短hash的计算量非常相助。
#+end_src

** "Some users have 150+ packfiles and the MRU misses and abbreviation computations are significant."

*** So, what's the MRU in git packfiles? -more likely to have a miss on our most-recently-used packfile
*** Because abbreviations need to inspect every packfile

** For some large repositories, repacking into a single packfile is not feasible due to storage space or excessive repack times.

阅读packfile.org


** What the MRU cache? —— oppsite of LRU
*** https://github.com/git/git/search?l=C&q=MRU&type=code


* Design Principles

** 完全兼容设计，单独的文件
*** 对老版本兼容
*** 对其他不支持midx的平台完全兼容
*** 随时删除midx对当前工作无影响

** 复杂度：寻找任意对象复杂度为 O(log N)
** midx 文件结构
*** HEADER: 12-byte
**** [4-byte]  signature : {'M', 'I', 'D', 'X'}
**** [1-byte]  version: 1 (currrent)
**** [1-byte]  OID version : 1 or 2 (SHA-1 or SHA-256)
**** [1-byte]  number of "chunks"
**** [1-byte]  number of base midx files: always 0 (current)
**** [4-byte]  number of pack files
*** Chunck Lookup: (C + 1) * 12-byte
**** [4-byte]  chunk id. Value 0 is a terminating label.
**** [8-byte]  chunk start offset (Chunks are provided in file-order, so you can infer the length using the next chunk position if necessary) https://git-scm.com/docs/chunk-format
*** Chunk Data:
**** [var-byte] Packfile names
***** storage: concatenated, null-terminated strings
***** order: lexicographic
***** 4-bytes-clean: last chunk for alignment
**** [255 * 4-byte] Fanout. F[i] store number of OIDs with first byte(OID前两位) at most i (包括之前的总量)， F[255] stores the total number of object.
**** [?-byte] OID look up:  storage all the OIDs
***** order : lexicographic
**** [8-byte] Object Offsets.
***** [4-byte] the pack-int-id for the pack storing this object.
***** [4-byte] the offset within the pack
*  Implementations
** GET
*** builtin/pack-object.c#want_object_in_pack
#+begin_src c
	for (m = get_multi_pack_index(the_repository); m; m = m->next) {
		struct pack_entry e;
		if (fill_midx_entry(the_repository, oid, &e, m)) {
			want = want_object_in_pack_one(e.p, oid, exclude, found_pack, found_offset);
			if (want != -1)
				return want;
		}
	}
#+end_src

#+begin_src c

struct multi_pack_index {
	struct multi_pack_index *next; // support multi midx in furture

	const unsigned char *data;
	size_t data_len;

	const uint32_t *revindex_data;
	const uint32_t *revindex_map;
	size_t revindex_len;

	uint32_t signature;
	unsigned char version;
	unsigned char hash_len;
	unsigned char num_chunks;
	uint32_t num_packs;
	uint32_t num_objects; // total recorded number of objects in this midx

	int local;

	const unsigned char *chunk_pack_names;
	const uint32_t *chunk_oid_fanout;
	const unsigned char *chunk_oid_lookup;
	const unsigned char *chunk_object_offsets;
	const unsigned char *chunk_large_offsets;

	const char **pack_names;
	struct packed_git **packs; // packs info recorded in mdix
	char object_dir[FLEX_ARRAY];
};
#+end_src

*** midx.c#fill_midx_entry

#+begin_src c

  // Find object in midx, if find , package to a pack_entry to let it be found in a specific pack.


  int fill_midx_entry(struct repository * r,
                      const struct object_id *oid,
                      struct pack_entry *e,
                      struct multi_pack_index *m)
  {
          uint32_t pos;
          uint32_t pack_int_id;
          struct packed_git *p;

          if (!bsearch_midx(oid, m, &pos)) // 查找object是否可在本midx中找到
                  return 0;

          if (pos >= m->num_objects)
                  return 0;

          pack_int_id = nth_midxed_pack_int_id(m, pos);

          if (prepare_midx_pack(r, m, pack_int_id)) // 校验pack是否合法, 并添加到`packed_git`和`packed_git_mru`
                  return 0;
          p = m->packs[pack_int_id];

          /*
          ,* We are about to tell the caller where they can locate the
          ,* requested object.  We better make sure the packfile is
          ,* still here and can be accessed before supplying that
          ,* answer, as it may have been deleted since the MIDX was
          ,* loaded!
          ,*/
          if (!is_pack_valid(p))
                  return 0;

          if (oidset_size(&p->bad_objects) &&
              oidset_contains(&p->bad_objects, oid))
                  return 0;

          e->offset = nth_midxed_offset(m, pos); 
          e->p = p;

          return 1;
  }
#+end_src

** Verify (#cmd_multi_pack_index_verify)

#+begin_src c
  struct multi_pack_index *load_multi_pack_index(const char *object_dir, int local)
#+end_src

核心逻辑:
#+begin_src c
	struct multi_pack_index *m = load_multi_pack_index(object_dir, 1);
#+end_src

** Generate
*** 
* Satellite Diffs from Gitaly
** 2 packs will not make a full pack
** support write mbit when repack idx, gitaly use repack.writeBitmaps=true which is wrong， repack.writeBitmaps， gitaly添加了这个`-c`配置为false, 没有什么影响
When true, git will write a bitmap index when packing *all* objects to disk (e.g., when git repack -a is run). This index can speed up the "counting objects" phase of subsequent packs created for clones and fetches, at the cost of some disk space and extra time spent on the initial repack. This has no effect if multiple packfiles are created. Defaults to true on bare repos, false otherwise.

如果不是打全包， 则不会生成多包索引

** delta_island 的配置
*** 为pack.island新增 "r(e)fs/merge-requests"(原有gitaly实现为pack.island 设置为 "r(e)fs/tags“ 和 "r(e)fs/heads“, pack.islandCore 设置为"e"，repack.useDeltaIslands 设置为 true)
*** 为write参数新增 "--bitmap" 选项


* Test:
** [satellite]ENV(172.27.66.61):
*** Use grpcurl test in VPC， invoke satellite GRPC interface
*** repo: /home/git/repositories/672/550/000/550672.git
*** request:

 #+begin_src shell
   grpcurl -plaintext -protoset satellite.protoset  -d '{"repository": {"gl_repository_id": 228676,"relative_path": "676/228/000/228676.git","storage_name": "default"}}'  localhost:58081 "satellite.RepositoryService/MidxRepack"

 #+end_src

*** 生成protoset

protoc --proto_path=. \
    --descriptor_set_out=myservice.protoset \
    --include_imports \
    my/custom/server/service.proto

*** command

 #+begin_src shell
grpcurl -plaintext -protoset satellite.protoset  -d '{"repository": {"gl_repository_id": 551613,"relative_path": "613/551/000/551613.git","storage_name": "default"}}'  localhost:58081 "satellite.RepositoryService/MidxRepack"
 #+end_src

** [repack]
*** 当无pack时， error: no pack files to index.
*** --batch-size:
***** 0 : full repack
***** <size>: from oldest to newest, if <size>
***** github/git maintainence/gitaly的做法: 选择次大包+1作为size，在3个包或3个以上情况下， 至少打包两个pack

#+begin_src text
Instead, we select the second-largest pack-file, and create a batch size
that is one larger than that pack-file. If there are three or more
pack-files, then this guarantees that at least two will be combined into
a new pack-file.
#+end_src

***** second_large_pack_size: not repack

***** second_large_pack_size + 1: repack 2 packs at lease, from oldest to newest

** [write]
*** 默认自动生成mbit和rev

*** 连带生成mbit， 第一次生成耗时较久；

#+begin_src shell
  time git multi-pack-index write --bitmap                                             
  Selecting bitmap commits: 1058205, done.
  Building bitmaps: 100% (516/516), done.
  LANG=en_GB git multi-pack-index write --bitmap  403.36s user 8.57s system 95% cpu 7:11.55 total
#+end_src
*** 重新生成midx， 对于大库， 可以复用现有midx不会从头生成， 时间较为可控
#+begin_src text
➜  pack git:(master) ✗ time git multi-pack-index write --no-bitmap                                          <<<
LANG=en_GB git multi-pack-index write --no-bitmap  2.07s user 0.30s system 94% cpu 2.513 total
#+end_src
*** 测试添加一个新的pack，再次执行, 时间缩短3倍左右；

#+begin_src shell
➜  pack git:(master) ✗ time git multi-pack-index write --bitmap --progress                                  <<<
Selecting bitmap commits: 1058205, done.
Building bitmaps: 100% (516/516), done.
LANG=en_GB git multi-pack-index write --bitmap --progress  134.39s user 3.72s system 98% cpu 2:19.53 total
#+end_src

*** 测试生成commit-graph, 再次执行, 时间与无commit-graph相比并无明显差别
#+begin_src shell
➜  pack git:(master) ✗ time git multi-pack-index write --bitmap --progress                                  <<<
Selecting bitmap commits: 1058205, done.
Building bitmaps: 100% (516/516), done.
LANG=en_GB git multi-pack-index write --bitmap --progress  146.71s user 3.28s system 99% cpu 2:30.71 total
#+end_src


* Learn
** protoset
*** [x] 验证protoset中的服务： grpcurl -protoset satellite.protoset list
*** [x]验证gRPC services： grpcurl -plaintext localhost:58081 list satellite.RepositoryService
** midx repack
*** TODO learn from https://github.com/git/git/blob/master/t/t5319-multi-pack-index.sh



* Conclusion
** If an old midx exists, `git multi-pack-index write` will overwrite the old one with a new one
** TODO why repack.writeBitmaps with "s", if only imply on a full packing


#+begin_src shell
-r--r--r-- 1 git git 13709 Dec 10 16:25 pack-aad1773e087ffbf9a66705c22bbe6affcba6c369.pack
-rw-rw-r-- 1 git git  5060 Dec 10 16:25 multi-pack-index
-r--r--r-- 1 git git  2748 Dec 10 16:26 pack-2f730ab6c7bd0517c67578a4cea0031debbaf843.pack
-r--r--r-- 1 git git  2754 Dec 10 16:26 pack-5d3c6dba2d0b5cea5a0c26dd61f059873c6cf3a6.pack
drwxr-xr-x 2 git git  4096 Dec 10 16:26 .
drwxr-xr-x 4 git git  4096 Dec 10 16:26 ..

     -r--r--r-- 1 git git 13709 Dec 10 16:25 pack-aad1773e087ffbf9a66705c22bbe6affcba6c369.pack
     -r--r--r-- 1 git git  2754 Dec 10 16:26 pack-5d3c6dba2d0b5cea5a0c26dd61f059873c6cf3a6.pack
     -r--r--r-- 1 git git  2748 Dec 10 16:26 pack-2f730ab6c7bd0517c67578a4cea0031debbaf843.pack
     -r--r--r-- 1 git git   848 Dec 10 16:27 multi-pack-index-4ff82a1062f54c7a61303db5ab1cbcd523e4a731.rev
     -r--r--r-- 1 git git  3988 Dec 10 16:27 multi-pack-index-4ff82a1062f54c7a61303db5ab1cbcd523e4a731.bitmap
    -rw-rw-r-- 1 git git  6840 Dec 10 16:27 multi-pack-index
    drwxr-xr-x 4 git git  4096 Dec 10 16:26 ..
    drwxr-xr-x 2 git git  4096 Dec 10 16:27 .

  // 按照2755 （second large pack size + 1）, 

-r--r--r-- 1 git git 13709 Dec 10 16:25 pack-aad1773e087ffbf9a66705c22bbe6affcba6c369.pack
-r--r--r-- 1 git git  5470 Dec 10 16:29 pack-956c6c38a0b28d4365e59e114bccb45ffd0de60a.pack
-r--r--r-- 1 git git  2754 Dec 10 16:26 pack-5d3c6dba2d0b5cea5a0c26dd61f059873c6cf3a6.pack
-r--r--r-- 1 git git  2748 Dec 10 16:26 pack-2f730ab6c7bd0517c67578a4cea0031debbaf843.pack
-r--r--r-- 1 git git    32 Dec 10 16:29 pack-029d08823bd8a8eab510ad6ac75c823cfd3ed31e.pack
-rw-rw-r-- 1 git git  6940 Dec 10 16:29 multi-pack-index
drwxr-xr-x 4 git git  4096 Dec 10 16:26 ..
drwxr-xr-x 2 git git  4096 Dec 10 16:29 .

#+end_Src
