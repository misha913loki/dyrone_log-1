

* For C programs

** introduction
*** 1972 by Dennis Ritchie.
*** a procedural programming language
***  start by a "#" will be process by "preprocessor" (https://en.wikipedia.org/wiki/C_preprocessor)
**** takes a C program and produces another C program
**** "#include <stdio.h>": the preprocessor copies the preprocessed code of stdio.h to our file. (These header files generally contain declarations of functions. We need stdio.h for the function printf() used in the program. )
*** Difference between “int main()” and “int main(void)” in C/C++?
**** https://www.geeksforgeeks.org/difference-int-main-int-mainvoid/
*** #include <stdio.h> VS #include "stdio.h"
**** If the filename is enclosed within angle brackets, the file is searched for in the standard compiler include paths.
****  If the filename is enclosed within double quotes, the search path is expanded to include the current source file directory.

** Standard
**  Complilation process

*** Pre-processing(file ".i")
**** Removal of Comments
**** Expansion of Macros
**** Expansion of the included files.
**** Conditional compilation
*** Compilation (".s")

**** source code -> intructions
The next step is to compile filename.i and produce an  intermediate compiled output file filename.s. This file is in assembly level instructions. Let’s see through this file using $vi filename.s  


*** Assembly(.o)

**** instruction -> machine language
In this phase the filename.s is taken as input and turned into filename.o by assembler. This file contain machine level instructions. At this phase, only existing code is converted into machine language, the function calls like printf() are not resolved. Let’s view this file using $vi filename.o 

*** Linking
**** definition
This is the final phase in which all the linking of function calls with their definitions are done. Linker knows where all these functions are implemented. Linker does some extra work also, it adds some extra code to our program which is required when the program starts and ends. For example, there is a code which is required for setting up the environment like passing command line arguments. This task can be easily verified by using $size filename.o and $size filename. Through these commands, we know that how output file increases from an object file to an executable file. This is because of the extra code that linker adds with our program. 

**** static linking
Static Linking and Static Libraries is the result of the linker making copy of all used library functions to the executable file.
***** benifits:
****** speed, no dynamic query of symbols
****** no dependency, everything is bundled into your application, you dont't have to worry that the client will have the right library avalible on their system.
***** drawbacks:
****** Big RAM:  each process gets its own copy of the code and data. Where as in case of dynamic libraries it is only code shared, data is specific to each process. User would be slowed down by a lot of paging.
****** entirely build & ship,  If there is any bug in library code, entire application need to be recompiled and shipped to the client.
**** dynamic linking
**** Difference between code object and executable file
https://pediaa.com/what-is-the-difference-between-object-file-and-executable-file/
#+begin_src text
Object files are source compiled into binary machine language, but they contain unresolved external references (such as printf,for instance). They may need to be linked against other object files, third party libraries and almost always against C/C++ runtime library.
In Unix, both object and exe files are the same COFF format. The only difference is that object files have unresolved external references, while a.out files don't.
#+end_src
**** links:
https://www.geeksforgeeks.org/static-vs-dynamic-libraries/
https://www.geeksforgeeks.org/working-with-shared-libraries-set-1/
https://www.geeksforgeeks.org/working-with-shared-libraries-set-2/

** size_t


   
Type size_t is a s typedef that's an alias for some unsigned integer type;

Each Standard C implementation is supposed to choose the unsigned integer that's big enough–but no bigger than needed–to represent the size of the largest possible object on the target platform;

From : https://www.embedded.com/why-size_t-matters/
